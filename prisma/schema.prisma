generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  MAHASISWA
  DOSEN
  BAPPEDA
  REVIEWER
}

model periode {
  id_periode Int         @id @default(autoincrement())
  nama       String      @db.VarChar(20)
  status     Boolean     @default(false)
  mahasiswa  mahasiswa[]
  kecamatan  kecamatan[]
}

model kabupaten {
  id_kabupaten Int         @id @default(autoincrement())
  nama         String      @db.VarChar(20)
  kecamatan    kecamatan[]
  bappeda      bappeda[]
}

model kecamatan {
  id_kecamatan        Int                   @id @default(autoincrement())
  id_kabupaten        Int
  id_periode          Int
  nama                String                @db.VarChar(20)
  potensi             String                @db.Text
  status              Int                   @db.TinyInt
  kabupaten           kabupaten             @relation(fields: [id_kabupaten], references: [id_kabupaten], onDelete: Cascade, onUpdate: Cascade)
  periode             periode?              @relation(fields: [id_periode], references: [id_periode], onDelete: Cascade, onUpdate: Cascade)
  desa                desa[]
  proposal            proposal[]
  mahasiswa_kecamatan mahasiswa_kecamatan[]
}

model desa {
  id_desa      Int       @id @default(autoincrement())
  id_kecamatan Int
  nama         String    @db.VarChar(20)
  kecamatan    kecamatan @relation(fields: [id_kecamatan], references: [id_kecamatan], onDelete: Cascade, onUpdate: Cascade)
}

model proposal {
  id_proposal  Int       @id @default(autoincrement())
  id_kecamatan Int
  id_dosen     Int
  proposal     String    @db.Text
  status       Int       @db.TinyInt
  created_at   DateTime  @default(now()) @db.DateTime(0)
  kecamatan    kecamatan @relation(fields: [id_kecamatan], references: [id_kecamatan], onDelete: Cascade, onUpdate: Cascade)
  dosen        dosen     @relation(fields: [id_dosen], references: [id_dosen], onDelete: Cascade, onUpdate: Cascade)
}

model mahasiswa_kecamatan {
  id_mahasiswa_kecamatan Int       @id @default(autoincrement())
  id_mahasiswa           Int
  id_kecamatan           Int
  status                 Int       @db.TinyInt
  created_at             DateTime  @default(now()) @db.DateTime(0)
  mahasiswa              mahasiswa @relation(fields: [id_mahasiswa], references: [id_mahasiswa], onDelete: Cascade, onUpdate: Cascade)
  kecamatan              kecamatan @relation(fields: [id_kecamatan], references: [id_kecamatan], onDelete: Cascade, onUpdate: Cascade)
}

model user {
  id_user    Int         @id @default(autoincrement())
  username   String      @unique(map: "username") @db.VarChar(50)
  password   String      @db.VarChar(100)
  role       Role
  created_at DateTime    @default(now()) @db.DateTime(0)
  mahasiswa  mahasiswa[]
  bappeda    bappeda[]
  admin      admin?
  dosen      dosen?
  reviewer   reviewer?
}

model admin {
  id_admin   Int      @id @default(autoincrement())
  id_user    Int?     @unique
  nama       String   @db.VarChar(50)
  nip        String   @unique @db.VarChar(50)
  created_at DateTime @default(now()) @db.DateTime(0)
  user       user?    @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
}

model bappeda {
  id_bappeda   Int       @id @default(autoincrement())
  id_user      Int?      @unique
  id_kabupaten Int       @unique
  nama         String    @db.VarChar(50)
  nisn         String    @unique @db.VarChar(50)
  nama_pj      String    @db.VarChar(50)
  created_by   String    @db.VarChar(50)
  created_at   DateTime  @default(now()) @db.DateTime(0)
  user         user?     @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
  kabupaten    kabupaten @relation(fields: [id_kabupaten], references: [id_kabupaten], onDelete: Cascade, onUpdate: Cascade)
}

model reviewer {
  id_reviewer Int      @id @default(autoincrement())
  id_user     Int?     @unique
  nama        String   @db.VarChar(50)
  nip         String   @unique @db.VarChar(50)
  created_at  DateTime @default(now()) @db.DateTime(0)
  user        user?    @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
}

model dosen {
  id_dosen   Int        @id @default(autoincrement())
  id_user    Int?       @unique
  nama       String     @db.VarChar(50)
  nip        String     @unique @db.VarChar(50)
  created_at DateTime   @default(now()) @db.DateTime(0)
  user       user?      @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
  proposal   proposal[]
}

model mahasiswa {
  id_mahasiswa        Int                   @id @default(autoincrement())
  id_user             Int?                  @unique
  id_periode          Int
  nama                String                @db.VarChar(50)
  nim                 String                @unique @db.VarChar(20)
  prodi               String                @db.VarChar(50)
  created_at          DateTime              @default(now()) @db.DateTime(0)
  user                user?                 @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
  periode             periode               @relation(fields: [id_periode], references: [id_periode], onDelete: Cascade, onUpdate: Cascade)
  lrk                 lrk[]
  lpk                 lpk[]
  mahasiswa_kecamatan mahasiswa_kecamatan[]
}

model lrk {
  id_lrk       Int       @id @default(autoincrement())
  id_mahasiswa Int
  potensi      String    @db.Text
  program      String    @db.Text
  sasaran      String    @db.Text
  metode       String    @db.Text
  luaran       String    @db.Text
  created_at   DateTime  @default(now()) @db.DateTime(0)
  mahasiswa    mahasiswa @relation(fields: [id_mahasiswa], references: [id_mahasiswa], onDelete: Cascade, onUpdate: Cascade)
  lpk          lpk[]
}

model lpk {
  id_lpk       Int       @id @default(autoincrement())
  id_lrk       Int
  id_mahasiswa Int
  metode       String    @db.Text
  pelaksanaan  String    @db.Text
  capaian      String    @db.Text
  hambatan     String    @db.Text
  kelanjutan   String    @db.Text
  created_at   DateTime  @default(now()) @db.DateTime(0)
  lrk          lrk       @relation(fields: [id_lrk], references: [id_lrk], onDelete: Cascade, onUpdate: Cascade)
  mahasiswa    mahasiswa @relation(fields: [id_mahasiswa], references: [id_mahasiswa], onDelete: Cascade, onUpdate: Cascade)
}
