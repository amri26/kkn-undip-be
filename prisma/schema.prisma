generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  MAHASISWA
  DOSEN
  BAPPEDA
  REVIEWER
}

model tema {
  id_tema      Int            @id @default(autoincrement())
  nama         String         @db.VarChar(50)
  periode      String         @db.VarChar(50)
  jenis        Int            @db.TinyInt
  status       Boolean        @default(false)
  kabupaten    kabupaten[]
  tema_halaman tema_halaman[]
}

model halaman {
  id_halaman   Int            @id @default(autoincrement())
  nama         String         @db.VarChar(50)
  tema_halaman tema_halaman[]
}

model tema_halaman {
  id_tema_halaman Int         @id @default(autoincrement())
  id_tema         Int
  id_halaman      Int
  status          Boolean     @default(false)
  tema            tema        @relation(fields: [id_tema], references: [id_tema], onDelete: Cascade, onUpdate: Cascade)
  halaman         halaman     @relation(fields: [id_halaman], references: [id_halaman], onDelete: Cascade, onUpdate: Cascade)
  gelombang       gelombang[]
}

model gelombang {
  id_gelombang        Int                   @id @default(autoincrement())
  id_tema_halaman     Int?
  nama                String                @db.VarChar(50)
  status              Boolean               @default(false)
  tema_halaman        tema_halaman?         @relation(fields: [id_tema_halaman], references: [id_tema_halaman], onDelete: Cascade, onUpdate: Cascade)
  proposal            proposal[]
  mahasiswa_kecamatan mahasiswa_kecamatan[]
}

model fakultas {
  id_fakultas Int     @id @default(autoincrement())
  nama        String  @db.VarChar(50)
  prodi       prodi[]
}

model prodi {
  id_prodi    Int         @id @default(autoincrement())
  id_fakultas Int
  nama        String      @db.VarChar(50)
  fakultas    fakultas    @relation(fields: [id_fakultas], references: [id_fakultas], onDelete: Cascade, onUpdate: Cascade)
  mahasiswa   mahasiswa[]
}

model dokumen {
  id_dokumen Int        @id @default(autoincrement())
  id_drive   String     @db.VarChar(100)
  created_at DateTime   @default(now()) @db.DateTime(0)
  proposal   proposal[]
}

model kabupaten {
  id_kabupaten Int         @id @default(autoincrement())
  id_tema      Int
  id_bappeda   Int?
  nama         String      @db.VarChar(50)
  tema         tema        @relation(fields: [id_tema], references: [id_tema], onDelete: Cascade, onUpdate: Cascade)
  bappeda      bappeda?    @relation(fields: [id_bappeda], references: [id_bappeda], onDelete: Cascade, onUpdate: Cascade)
  kecamatan    kecamatan[]
}

model kecamatan {
  id_kecamatan               Int                          @id @default(autoincrement())
  id_kabupaten               Int
  nama                       String                       @db.VarChar(50)
  potensi                    String                       @db.Text
  status                     Int                          @default(0) @db.TinyInt
  kabupaten                  kabupaten                    @relation(fields: [id_kabupaten], references: [id_kabupaten], onDelete: Cascade, onUpdate: Cascade)
  desa                       desa[]
  proposal                   proposal[]
  mahasiswa_kecamatan        mahasiswa_kecamatan[]
  mahasiswa_kecamatan_active mahasiswa_kecamatan_active[]
}

model desa {
  id_desa      Int       @id @default(autoincrement())
  id_kecamatan Int
  nama         String    @db.VarChar(50)
  kecamatan    kecamatan @relation(fields: [id_kecamatan], references: [id_kecamatan], onDelete: Cascade, onUpdate: Cascade)
}

model proposal {
  id_proposal  Int       @id @default(autoincrement())
  id_kecamatan Int
  id_dosen     Int
  id_gelombang Int
  id_dokumen   Int
  komentar     String?   @db.Text
  rekomendasi  Boolean?
  status       Int       @default(0) @db.TinyInt
  created_at   DateTime  @default(now()) @db.DateTime(0)
  kecamatan    kecamatan @relation(fields: [id_kecamatan], references: [id_kecamatan], onDelete: Cascade, onUpdate: Cascade)
  dosen        dosen     @relation(fields: [id_dosen], references: [id_dosen], onDelete: Cascade, onUpdate: Cascade)
  gelombang    gelombang @relation(fields: [id_gelombang], references: [id_gelombang], onDelete: Cascade, onUpdate: Cascade)
  dokumen      dokumen   @relation(fields: [id_dokumen], references: [id_dokumen], onDelete: Cascade, onUpdate: Cascade)
}

model mahasiswa_kecamatan {
  id_mahasiswa_kecamatan Int       @id @default(autoincrement())
  id_mahasiswa           Int
  id_kecamatan           Int
  id_gelombang           Int
  status                 Int       @default(0) @db.TinyInt
  created_at             DateTime  @default(now()) @db.DateTime(0)
  mahasiswa              mahasiswa @relation(fields: [id_mahasiswa], references: [id_mahasiswa], onDelete: Cascade, onUpdate: Cascade)
  kecamatan              kecamatan @relation(fields: [id_kecamatan], references: [id_kecamatan], onDelete: Cascade, onUpdate: Cascade)
  gelombang              gelombang @relation(fields: [id_gelombang], references: [id_gelombang], onDelete: Cascade, onUpdate: Cascade)
}

model mahasiswa_kecamatan_active {
  id_mahasiswa_kecamatan_active Int       @id @default(autoincrement())
  id_mahasiswa                  Int       @unique
  id_kecamatan                  Int
  mahasiswa                     mahasiswa @relation(fields: [id_mahasiswa], references: [id_mahasiswa], onDelete: Cascade, onUpdate: Cascade)
  kecamatan                     kecamatan @relation(fields: [id_kecamatan], references: [id_kecamatan], onDelete: Cascade, onUpdate: Cascade)
}

model user {
  id_user    Int        @id @default(autoincrement())
  username   String     @unique(map: "username") @db.VarChar(50)
  password   String     @db.VarChar(100)
  role       Role
  created_at DateTime   @default(now()) @db.DateTime(0)
  mahasiswa  mahasiswa?
  bappeda    bappeda?
  admin      admin?
  dosen      dosen?
  reviewer   reviewer?
}

model admin {
  id_admin   Int      @id @default(autoincrement())
  id_user    Int?     @unique
  nama       String   @db.VarChar(50)
  nip        String   @unique @db.VarChar(50)
  created_at DateTime @default(now()) @db.DateTime(0)
  user       user?    @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
}

model bappeda {
  id_bappeda     Int         @id @default(autoincrement())
  id_user        Int?        @unique
  nama           String      @db.VarChar(50)
  nb             String      @unique @db.VarChar(50)
  nama_kabupaten String      @db.VarChar(50)
  nama_pj        String      @db.VarChar(50)
  created_by     String      @db.VarChar(50)
  created_at     DateTime    @default(now()) @db.DateTime(0)
  user           user?       @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
  kabupaten      kabupaten[]
}

model reviewer {
  id_reviewer Int      @id @default(autoincrement())
  id_user     Int?     @unique
  nama        String   @db.VarChar(50)
  nip         String   @unique @db.VarChar(50)
  created_at  DateTime @default(now()) @db.DateTime(0)
  user        user?    @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
}

model dosen {
  id_dosen   Int        @id @default(autoincrement())
  id_user    Int?       @unique
  nama       String     @db.VarChar(50)
  nip        String     @unique @db.VarChar(50)
  created_at DateTime   @default(now()) @db.DateTime(0)
  user       user?      @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
  proposal   proposal[]
}

model mahasiswa {
  id_mahasiswa               Int                         @id @default(autoincrement())
  id_user                    Int?                        @unique
  id_prodi                   Int?
  nama                       String                      @db.VarChar(50)
  nim                        String                      @unique @db.VarChar(50)
  is_registered              Boolean                     @default(false)
  created_at                 DateTime                    @default(now()) @db.DateTime(0)
  user                       user?                       @relation(fields: [id_user], references: [id_user], onDelete: SetNull, onUpdate: Cascade)
  prodi                      prodi?                      @relation(fields: [id_prodi], references: [id_prodi], onDelete: SetNull, onUpdate: Cascade)
  mahasiswa_kecamatan        mahasiswa_kecamatan[]
  mahasiswa_kecamatan_active mahasiswa_kecamatan_active?
  nilai                      nilai?
  laporan                    laporan[]
  reportase                  reportase[]
}

model nilai {
  id_nilai     Int       @id @default(autoincrement())
  id_mahasiswa Int       @unique
  post_test    Float?
  mahasiswa    mahasiswa @relation(fields: [id_mahasiswa], references: [id_mahasiswa], onDelete: Cascade, onUpdate: Cascade)
}

model laporan {
  id_laporan   Int       @id @default(autoincrement())
  id_mahasiswa Int
  potensi      String    @db.Text
  program      String    @db.Text
  sasaran      String    @db.Text
  metode       String    @db.Text
  luaran       String    @db.Text
  pelaksanaan  String?   @db.Text
  capaian      String?   @db.Text
  hambatan     String?   @db.Text
  kelanjutan   String?   @db.Text
  komentar     String?   @db.Text
  created_at   DateTime  @default(now()) @db.DateTime(0)
  mahasiswa    mahasiswa @relation(fields: [id_mahasiswa], references: [id_mahasiswa], onDelete: Cascade, onUpdate: Cascade)
}

model reportase {
  id_reportase Int       @id @default(autoincrement())
  id_mahasiswa Int
  judul        String    @db.VarChar(100)
  isi          String    @db.Text
  komentar     String?   @db.Text
  created_at   DateTime  @default(now()) @db.DateTime(0)
  mahasiswa    mahasiswa @relation(fields: [id_mahasiswa], references: [id_mahasiswa], onDelete: Cascade, onUpdate: Cascade)
}
